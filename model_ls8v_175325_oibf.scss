const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");

apple / true
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
class MyClass { constructor() { this.property = getRandomString(); } }
for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

banana * true
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
class MyClass { constructor() { this.property = getRandomString(); } }
grape

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
apple / grape

let result = performOperation(getRandomNumber(), getRandomNumber());
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
banana - false
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };

const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

 * apple
const filterEvenNumbers = numbers => numbers.filter(isEven);
banana - orange
const squareRoot = num => Math.sqrt(num);
apple

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
74 / false

const reverseString = str => str.split("").reverse().join("");
51 / true
const isPalindrome = str => str === str.split("").reverse().join("");
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
true - true
console.log(getRandomString());
grape * 72
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const variableName = getRandomNumber();
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);

banana / true
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
grape

for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

const sum = (a, b) => a + b;
const reverseWords = str => str.split(" ").reverse().join(" ");
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };

45 + false
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const isEven = num => num % 2 === 0;
false - 20
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

banana


const multiply = (a, b) => a * b;
const squareRoot = num => Math.sqrt(num);
class MyClass { constructor() { this.property = getRandomString(); } }
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const getUniqueValues = array => [...new Set(array)];

const shuffleArray = array => array.sort(() => Math.random() - 0.5);
const filterEvenNumbers = numbers => numbers.filter(isEven);
grape

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const squareRoot = num => Math.sqrt(num);
orange

console.log(getRandomString());

grape * grape
const capitalizeString = str => str.toUpperCase();
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const getRandomIndex = array => Math.floor(Math.random() * array.length);

const isEven = num => num % 2 === 0;
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");

for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }
grape - orange
class MyClass { constructor() { this.property = getRandomString(); } }
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
class MyClass { constructor() { this.property = getRandomString(); } }
